
#include "stdafx.h"
#include <memory.h>
#include <string.h>

EXEC SQL INCLUDE SQLCA;
#include "esqldll.h"
#include "DBLayer.h"


SRETVALUE SRetValue;
//////////////////////////////////////////////////////////////////////////////

EXEC SQL WHENEVER SQLERROR
{

char *ptrDummy;

	memset(m_strMessage, '\0', sizeof(m_strMessage));
    m_SqlCode = SQLCODE;
	ptrDummy  = sqlerror_message( &sqlca, m_strMessage, sizeof( m_strMessage ));
    return( SRetValue );

};
//////////////////////////////////////////////////////////////////////////////
CDBLayer::CDBLayer()
{
	m_SqlCode = 0;
	memset(m_strMessage, '\0', sizeof(m_strMessage));

	db_init( &sqlca );  
	// Check for errors after the call to this function
}
//////////////////////////////////////////////////////////////////////////////
CDBLayer::~CDBLayer()
{

   db_fini( &sqlca );

}
//////////////////////////////////////////////////////////////////////////////
SRETVALUE CDBLayer::Init()
{

 //  db_init( &sqlca );   // has been called in the constructor

   SRetValue.SqlCode = m_SqlCode;
   strcpy_s(SRetValue.strMessage, m_strMessage);
   return SRetValue;
    
}
//////////////////////////////////////////////////////////////////////////////
SRETVALUE CDBLayer::Commit()
{
	EXEC SQL COMMIT;
	SRetValue.SqlCode = m_SqlCode;
	strcpy_s(SRetValue.strMessage, m_strMessage);
	return SRetValue;

}
//////////////////////////////////////////////////////////////////////////////
int CDBLayer::GetErrorCode()
{
	return m_SqlCode;
}
//////////////////////////////////////////////////////////////////////////////
char* CDBLayer::GetErrorDesc()
{
	return m_strMessage;
}
//////////////////////////////////////////////////////////////////////////////
SRETVALUE CDBLayer::ConnectSharedMemory(
    EXEC SQL BEGIN DECLARE SECTION;
    char   *ConnectionName,
    char   *UserID,
    char   *Password
    EXEC SQL END DECLARE SECTION;
    )

{

	EXEC SQL CONNECT AS :ConnectionName
	USER :UserID IDENTIFIED BY :Password;
	
    SRetValue.SqlCode = m_SqlCode;
	strcpy_s(SRetValue.strMessage, m_strMessage);
	return SRetValue;
}
//////////////////////////////////////////////////////////////////////////////
SRETVALUE CDBLayer::DisconnectSharedMemory()
{

	EXEC SQL DISCONNECT;

	SRetValue.SqlCode = m_SqlCode;
	strcpy_s(SRetValue.strMessage, m_strMessage);
	return SRetValue;

}
//////////////////////////////////////////////////////////////////////////////
SRETVALUE CDBLayer::ConnectTCP(
	char*  strServerName,
	char*  strDBName,
    char*  strConnectionName,
    char*  strUserID,
    char*  strPassword
    )

{

    char     dbconnstr[101];
	memset(dbconnstr, '\0', 101);

	sprintf(dbconnstr, "uid=%s;pwd=%s;eng=%s;links=tcpip;dbf=%s;autostop=yes;LOG=c:\\Qtus\\ConLog.txt", strUserID, strPassword, strServerName, strDBName);
	db_string_connect( &sqlca, dbconnstr);

    SRetValue.SqlCode = m_SqlCode;
	strcpy_s(SRetValue.strMessage, m_strMessage);
	return SRetValue;
}
//////////////////////////////////////////////////////////////////////////////
SRETVALUE CDBLayer::DisConnectTCP(	char*  strServerName,
	char*  strDBName,
    char*  strConnectionName,
    char*  strUserID,
    char*  strPassword
)
{

    char     dbDisconstr[101];
	memset(dbDisconstr, '\0', 101);

	sprintf(dbDisconstr, "uid=%s;pwd=%s;eng=%s;links=tcpip;dbf=%s;autostop=yes;", strUserID, strPassword, strServerName, strDBName);
	db_string_disconnect( &sqlca, dbDisconstr);

    SRetValue.SqlCode = m_SqlCode;
	strcpy_s(SRetValue.strMessage, m_strMessage);
	return SRetValue;
}
//////////////////////////////////////////////////////////////////////////////
SRETVALUE CDBLayer::TruncateAllTables(int iCode)
{
	if (iCode == DELETE_FROM_TABLE)
	{
		EXEC SQL TRUNCATE TABLE "DBA"."ADD_ORDER_MPID";
		// EXEC SQL TRUNCATE TABLE "DBA"."ADD_ORDER_NO_MPID_Retired";
		EXEC SQL TRUNCATE TABLE "DBA"."ASSET_STAT";
		EXEC SQL TRUNCATE TABLE "DBA"."ASSETS";
		EXEC SQL TRUNCATE TABLE "DBA"."IPO_QUOTING_PERIOD_UPDATE";
		EXEC SQL TRUNCATE TABLE "DBA"."LOB_ASKS";
		EXEC SQL TRUNCATE TABLE "DBA"."LOB_BIDS";
		EXEC SQL TRUNCATE TABLE "DBA"."MP_POSITION";
		EXEC SQL TRUNCATE TABLE "DBA"."MWCB_BREACH";
		EXEC SQL TRUNCATE TABLE "DBA"."MWCB_Decline";
		EXEC SQL TRUNCATE TABLE "DBA"."NOII";
		EXEC SQL TRUNCATE TABLE "DBA"."ORDER_CANCEL";
		EXEC SQL TRUNCATE TABLE "DBA"."ORDER_DELETE";
		EXEC SQL TRUNCATE TABLE "DBA"."ORDER_EXECUTED";
		EXEC SQL TRUNCATE TABLE "DBA"."ORDER_EXECUTED_WITH_PRICE";
		EXEC SQL TRUNCATE TABLE "DBA"."ORDER_REPLACE";
		EXEC SQL TRUNCATE TABLE "DBA"."REG_SHO_REST";
		EXEC SQL TRUNCATE TABLE "DBA"."RPII";
		EXEC SQL TRUNCATE TABLE "DBA"."STOCK_DIRECTORY";
		EXEC SQL TRUNCATE TABLE "DBA"."STOCK_TRADING_ACTION";
		EXEC SQL TRUNCATE TABLE "DBA"."SYSTEM_EVENT";
		EXEC SQL  COMMIT;
	}
	SRetValue.SqlCode = m_SqlCode;
   strcpy_s(SRetValue.strMessage, m_strMessage);
   return SRetValue;
}
//////////////////////////////////////////////////////////////////////////////
SRETVALUE CDBLayer::StockDirectoryUpdate(int iCode)
{

	if (iCode == DELETE_FROM_TABLE)
	{
		EXEC SQL DELETE FROM DBA.STOCK_DIRECTORY;
	}

	SRetValue.SqlCode = m_SqlCode;
   strcpy_s(SRetValue.strMessage, m_strMessage);
   return SRetValue;
}
//////////////////////////////////////////////////////////////////////////////
SRETVALUE CDBLayer::AddOrderNoMPID(EXEC SQL BEGIN DECLARE SECTION;  /* Retired */
	char				MessageType,
	unsigned int		LocateCode,
	unsigned int		TrackingNumber,
	unsigned long long     iTimeStamp,
	unsigned long long	iOrderRefNumber,
	char				cBuySell,
	unsigned int		iShares,
	char*				Symbol,
	double				dPrice
EXEC SQL END DECLARE SECTION;
)
{
	EXEC SQL INSERT INTO DBA.ADD_ORDER_NO_MPID (
	MessageType,
	LocateCode,
	TrackingNumber,
	TimeStamp_,
	OrderRefNumber,
	BuySell,
	Shares,
	Symbol,
	Price) 	
	values (:MessageType, :LocateCode, :TrackingNumber, :iTimeStamp, :iOrderRefNumber, :cBuySell, :iShares, :Symbol, :dPrice);

	SRetValue.SqlCode = m_SqlCode;
   strcpy_s(SRetValue.strMessage, m_strMessage);
   return SRetValue;
	
}
//////////////////////////////////////////////////////////////////////////////////////////////////
SRETVALUE CDBLayer::AddOrderMPID(EXEC SQL BEGIN DECLARE SECTION;
	char				MessageType,
	unsigned int		LocateCode,
	unsigned int		TrackingNumber,
	unsigned long long     iTimeStamp,
	unsigned long long	iOrderRefNumber,
	char				cBuySell,
	unsigned int		iShares,
	char*				Symbol,
	double				dPrice,
	char*				MPID
EXEC SQL END DECLARE SECTION;
)
{
	EXEC SQL INSERT INTO DBA.ADD_ORDER_MPID (
	MessageType,
	LocateCode,
	TrackingNumber,
	TimeStamp_,
	OrderRefNumber,
	BuySell,
	Shares,
	Symbol,
	Price,
	MPID) 	
	values (:MessageType, :LocateCode, :TrackingNumber, :iTimeStamp, :iOrderRefNumber, :cBuySell, :iShares, :Symbol, :dPrice, :MPID);

#ifdef _SP
	/**************/
	EXEC SQL PREPARE S2 FROM 'CALL DBA.AI_AddOrder_Update_LOB(?, ?, ?, ?, ?)';
	EXEC SQL EXECUTE S2 USING :cBuySell, :MPID, :iShares, :dPrice, :Symbol;
	/**************/
#endif

	SRetValue.SqlCode = m_SqlCode;
	strcpy_s(SRetValue.strMessage, m_strMessage);
	return SRetValue;
	
}
////////////////////////////////////////////////////////////////////////////////////////////////////////
SRETVALUE CDBLayer::OrderCancel(EXEC SQL BEGIN DECLARE SECTION;
	char				cMessageType,
	unsigned int		iLocateCode,
	unsigned int		iTrackingNumber,
	unsigned long long   iTimeStamp,
	unsigned long long	iOrderRefNumber,
	unsigned int		iShares	
EXEC SQL END DECLARE SECTION;
)

{
	EXEC SQL INSERT INTO DBA.ORDER_CANCEL (
	MessageType,
	LocateCode,
	TrackingNumber,
	TimeStamp_,
	OrderRefNumber,
	Shares	
	)
	values (:cMessageType, :iLocateCode, :iTrackingNumber, :iTimeStamp, :iOrderRefNumber, :iShares);

	SRetValue.SqlCode = m_SqlCode;
	strcpy_s(SRetValue.strMessage, m_strMessage);
	return SRetValue;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////
SRETVALUE CDBLayer::OrderDelete(EXEC SQL BEGIN DECLARE SECTION;
	char					cMessageType,
	unsigned int			iLocateCode,
	unsigned int			TrackingNumber,
	unsigned long long		iTimeStamp,
	unsigned long long		iOrderRefNumber
	EXEC SQL END DECLARE SECTION;
)

{
	EXEC SQL INSERT INTO DBA.ORDER_DELETE (
	MessageType,
	LocateCode,
	TrackingNumber,
	TimeStamp_,
	OrderRefNumber
	)
	values (:cMessageType, :iLocateCode, :TrackingNumber, :iTimeStamp, :iOrderRefNumber);
#ifdef _SP
	/**************/
	EXEC SQL PREPARE S3 FROM 'CALL DBA.AI_DeleteOrder_Update_LOB(?)';
	EXEC SQL EXECUTE S3 USING :iOrderRefNumber ;
	/**************/
#endif
 	SRetValue.SqlCode = m_SqlCode;
	strcpy_s(SRetValue.strMessage, m_strMessage);
	return SRetValue;
}
////////////////////////////////////////////////////////////////////////////////////////////////////////
SRETVALUE CDBLayer::OrderReplace(EXEC SQL BEGIN DECLARE SECTION;
	char					cMessageType,
	unsigned int			iLocateCode,
	unsigned int			TrackingNumber,
	unsigned long long		iTimeStamp,
	unsigned long long		iOldOrderRefNumber,
	unsigned long long		iNewOrderRefNumber,
	unsigned int			iShares,
	double					dPrice
	EXEC SQL END DECLARE SECTION;
)

{
	EXEC SQL INSERT INTO DBA.ORDER_REPLACE (
	MessageType,
	LocateCode,
	TrackingNumber,
	TimeStamp_,
	OldOrderRefNumber,
	NewOrderRefNumber,
	Shares,
	Price
	)
	values (:cMessageType, :iLocateCode, :TrackingNumber, :iTimeStamp, :iOldOrderRefNumber, :iNewOrderRefNumber, :iShares, :dPrice);

#ifdef _SP
	/**************/
	EXEC SQL PREPARE S4 FROM 'CALL DBA.AI_ReplaceOrder_Update_LOB(?, ?)';
	EXEC SQL EXECUTE S4 USING :iOldOrderRefNumber, :iNewOrderRefNumber;
	/**************/
#endif
	SRetValue.SqlCode = m_SqlCode;
	strcpy_s(SRetValue.strMessage, m_strMessage);
	return SRetValue;
}
////////////////////////////////////////////////////////////////////////////////////////////////////////
SRETVALUE    CDBLayer::OrderExecuted(EXEC SQL BEGIN DECLARE SECTION;
	char				cMessageType,
	unsigned int		iLocateCode,	
	unsigned int		TrackingNumber,
	unsigned long long  iTimeStamp,	
	unsigned long long	iOrderRefNumber,
	unsigned int		iShares,
	unsigned long long     iOrderMatchNumber
	EXEC SQL END DECLARE SECTION;
)

{
	EXEC SQL INSERT INTO DBA.ORDER_EXECUTED (
	MessageType,
	LocateCode,	
	TrackingNumber,
	TimeStamp_,	
	OrderRefNumber,
	Shares,
	OrderMatchNumber
	)
	values ( :cMessageType, :iLocateCode, :TrackingNumber, :iTimeStamp, :iOrderRefNumber, :iShares, :iOrderMatchNumber);

#ifdef _SP
	/**************/
	EXEC SQL PREPARE S5 FROM 'CALL DBA.AI_ExecutedOrder_Update_LOB(?)';
	EXEC SQL EXECUTE S5 USING :iOrderRefNumber;
	/**************/
#endif
	SRetValue.SqlCode = m_SqlCode;
   strcpy_s(SRetValue.strMessage, m_strMessage);
   return SRetValue;
}
////////////////////////////////////////////////////////////////////////////////////////////////////////
SRETVALUE    CDBLayer::OrderExecutedWithPrice(EXEC SQL BEGIN DECLARE SECTION;
	char				cMessageType,
	unsigned int		iLocateCode,	
	unsigned int		TrackingNumber,
	unsigned long long  iTimeStamp,	
	unsigned long long	iOrderRefNumber,
	unsigned int		iShares,
	unsigned long long  iOrderMatchNumber,
	char				cPrintable,
	double				dExecutionPrice
	EXEC SQL END DECLARE SECTION;
)

{
	EXEC SQL INSERT INTO DBA.ORDER_EXECUTED_WITH_PRICE (
	MessageType,
	LocateCode,	
	TrackingNumber,
	TimeStamp_,	
	OrderRefNumber,
	Shares,
	OrderMatchNumber,
	Printable,
	dExecutionPrice
	)
	values ( :cMessageType, :iLocateCode, :TrackingNumber, :iTimeStamp, :iOrderRefNumber, :iShares, :iOrderMatchNumber, :cPrintable, :dExecutionPrice);

	SRetValue.SqlCode = m_SqlCode;
	strcpy_s(SRetValue.strMessage, m_strMessage);
	return SRetValue;
}
////////////////////////////////////////////////////////////////////////////////////////////////////////
SRETVALUE CDBLayer::StockDirectoryUpdate(EXEC SQL BEGIN DECLARE SECTION;
	int	OpCode,
	char	cMessageType,
	unsigned int		iSockLocale,
	unsigned int		iTracking_Number,
	unsigned long long     iTimeStamp,
 	char    *strStock,
	unsigned int     eMarketCategory,
    unsigned int     eFSI,
	unsigned int		iRoundLotSize,
	char	cRoundLotsOnly,
    char	cIssueClassification,
	char	*strIssueSubType,
	char	cAuthenticity,
	char    cShortSaleThresholdInd,
	char	cIPOFlag,
    char    cLULDRefPrice,
	char	cETPFlag,
    unsigned int		iETPLeverageFactor,
	char    cInverseFactor
EXEC SQL END DECLARE SECTION;
)
{
	switch (OpCode)
	{
		case 1:
			EXEC SQL INSERT INTO DBA.STOCK_DIRECTORY(
			 MessageType                     
			,StockLocale    
			,Tracking_Number               
			,TimeStamp_                    
			,Stock                         
			,MarketCategory                
			,FSI                           
			,RoundLotSize
			,RoundLotsOnly              
			,IssueClassification           
			,IssueSubtype                  
			,Authenticity                  
			,ShortSaleInd                  
			,IPOFlag                       
			,ETPLeverageFactor             
			,LULDRefPrice                  
			,ETPFlag                       
			,InverseFactor) 
			values (:cMessageType, :iSockLocale, :iTracking_Number, :iTimeStamp, :strStock, :eMarketCategory, :eFSI, :iRoundLotSize, :cRoundLotsOnly, :cIssueClassification, :strIssueSubType, :cAuthenticity, :cShortSaleThresholdInd, :cIPOFlag, :cLULDRefPrice, :cETPFlag,  :iETPLeverageFactor, :cInverseFactor);
		break;

		case  2: // update
			//EXEC SQL UPDATE dba.Country
			//set name = :Name, code = :Code, sortorder = :SortOrder
			//WHERE  code = :Code; //country code = conuntry code
		break;	

		case 3: // delete
			EXEC SQL DELETE from dba.STOCK_DIRECTORY;
		break;

		default:
			break;
	}

#ifdef _SP	
	/**************/
	EXEC SQL PREPARE S1 FROM 'CALL DBA.AI_Directory_Update_Assets(?)';
	EXEC SQL EXECUTE S1 USING :strStock;
	/**************/
#endif
	SRetValue.SqlCode = m_SqlCode;
	strcpy_s(SRetValue.strMessage, m_strMessage);
	return SRetValue;

}
//////////////////////////////////////////////////////////////////////////////
SRETVALUE CDBLayer::StockTradingAction(EXEC SQL BEGIN DECLARE SECTION;
	int					OpCode,
	char				cMessageType,
	unsigned int		iStockLocate,
	unsigned int		iTrackingNumber,
	unsigned long long iTimeStamp,
	char*	strSymbol,
	char	cTradingState,						// Trading State	19	1	Alpha	Indicates the current trading state for the stock. Allowable values:
	//'H' = Halted across all U.S. equity markets / SROs
	//'P' = Paused across all U.S. equity markets / SROs (NASDAQ-listed securities only)
	//'Q' = Quotation only period for cross-SRO halt or pause
	//'T' = Trading on NASDAQ
	char	cReserved,
	char*   strReason
EXEC SQL END DECLARE SECTION;
)
{
	EXEC SQL INSERT INTO DBA.STOCK_TRADING_ACTION(
			 MessageType                     
			,StockLocate    
			,TrackingNumber               
			,TimeStamp_                    
			,Symbol                         
			,TradingState
			,Reserved                      
			,Reason)
			values (:cMessageType, :iStockLocate, :iTrackingNumber, :iTimeStamp, :strSymbol, :cTradingState, :cReserved, :strReason);

#ifdef _SP
	/**************/
	EXEC SQL PREPARE S6 FROM 'CALL DBA.AI_StockTradingAction_Update_Assets(?, ?)';
	EXEC SQL EXECUTE S6 USING :strSymbol, :cTradingState ;
	/**************/
#endif
	SRetValue.SqlCode = m_SqlCode;
	strcpy_s(SRetValue.strMessage, m_strMessage);
	return SRetValue;
}
//////////////////////////////////////////////////////////////////////////////
SRETVALUE	CDBLayer::MarketParticipantPosition(EXEC SQL BEGIN DECLARE SECTION;
	char cMessageType,
	unsigned int iLocateCode,
	unsigned int TrackingNumber,
	unsigned long long iTimeStamp,
	char* strMPID,
	char* Stock,
	char cPrimaryMM,
	char cMMMode,
	char cMarketParticipantState
EXEC SQL END DECLARE SECTION;
)
{
	EXEC SQL INSERT INTO DBA.MP_POSITION(
	MessageType,
	LocateCode,
	TrackingNumber,
	TimeStamp_,
	MPID,
	Stock,
	PrimaryMM,
	MMMode,
	MarketParticipantState
	)
	values (:cMessageType, :iLocateCode, :TrackingNumber, :iTimeStamp, :strMPID, :Stock, :cPrimaryMM, :cMMMode, :cMarketParticipantState);

	SRetValue.SqlCode = m_SqlCode;
	strcpy_s(SRetValue.strMessage, m_strMessage);
	return SRetValue;
}
//////////////////////////////////////////////////////////////////////////////
SRETVALUE	CDBLayer::RPII(EXEC SQL BEGIN DECLARE SECTION;
	char cMessageType,
	unsigned int iLocateCode,
	unsigned int TrackingNumber,
	unsigned long long iTimeStamp,
	char* Stock,
	char cInterestFlag
EXEC SQL END DECLARE SECTION;
)
{

	EXEC SQL INSERT INTO DBA.RPII(
	MessageType,
	LocateCode,
	TrackingNumber,
	TimeStamp_,
	Stock,
	InterestFlag
	)
	values (:cMessageType, :iLocateCode, :TrackingNumber, :iTimeStamp, :Stock, :cInterestFlag);

	SRetValue.SqlCode = m_SqlCode;
	strcpy_s(SRetValue.strMessage, m_strMessage);
	return SRetValue;
}
//////////////////////////////////////////////////////////////////////////////
SRETVALUE	CDBLayer::SystemEvent(EXEC SQL BEGIN DECLARE SECTION;
		char cMessageType,
		unsigned int iStockLocale,
		unsigned int iTrackingNumber, 
		unsigned long long iTimeStamp, 
		char cEventCode 
		EXEC SQL END DECLARE SECTION;
		)
{

	EXEC SQL INSERT INTO DBA.SYSTEM_EVENT(
		MessageType,
		StockLocale,
		TrackingNumber, 
		TimeStamp_, 
		EventCode 
		)
		VALUES  (:cMessageType, :iStockLocale, :iTrackingNumber, :iTimeStamp, :cEventCode);
	
	SRetValue.SqlCode = m_SqlCode;
	strcpy_s(SRetValue.strMessage, m_strMessage);
	return SRetValue;
}
//////////////////////////////////////////////////////////////////////////////
SRETVALUE	CDBLayer::RegShoRestriction(EXEC SQL BEGIN DECLARE SECTION;
			char cMessageType,
			unsigned int iLocateCode,
			unsigned long long iTimeStamp,
			char* Symbol,
			char RegSHOAction
			EXEC SQL END DECLARE SECTION;
			)
{
		EXEC SQL INSERT INTO DBA.REG_SHO_REST(
			MessageType,
			LocateCode,
			TimeStamp_,
			Symbol,
			RegSHOAction
			)
			Values (:cMessageType, :iLocateCode, :iTimeStamp, :Symbol, :RegSHOAction);

	SRetValue.SqlCode = m_SqlCode;
	strcpy_s(SRetValue.strMessage, m_strMessage);
	return SRetValue;
}
//////////////////////////////////////////////////////////////////////////////
SRETVALUE	CDBLayer::MWCBDeclineLevelMessage(EXEC SQL BEGIN DECLARE SECTION;
						char cMessageType,	
						unsigned int iLocateCode,
						unsigned int TrackingNumber, 
						unsigned long long iTimeStamp, 
						double dLevel1,
						double dLevel2,
						double dLevel3
						EXEC SQL END DECLARE SECTION;
						)
{


		EXEC SQL INSERT INTO DBA.MWCB_Decline(
			MessageType,
			LocateCode,
			TrackingNUmber,
			TimeStamp_,
			Level1,
			Level2,
			Level3
			)
			Values (:cMessageType, :iLocateCode, :TrackingNumber, :iTimeStamp, :dLevel1, :dLevel2, :dLevel3);


	SRetValue.SqlCode = m_SqlCode;
	strcpy_s(SRetValue.strMessage, m_strMessage);
	return SRetValue;
}
//////////////////////////////////////////////////////////////////////////////
SRETVALUE	CDBLayer::MWCBBreachMessage(EXEC SQL BEGIN DECLARE SECTION;
										char cMessageType,
										unsigned int iLocateCode, 
										unsigned int TrackingNumber,
										unsigned long long iTimeStamp,
										char cBreachLevel
										EXEC SQL END DECLARE SECTION;
)
{

		EXEC SQL INSERT INTO DBA.MWCB_BREACH(
			MessageType,
			LocateCode,
			TrackingNUmber,
			TimeStamp_,
			Level1,
			BreachLevel
			)
			Values (:cMessageType, :iLocateCode, :TrackingNumber, :iTimeStamp, :cBreachLevel);

	SRetValue.SqlCode = m_SqlCode;
	strcpy_s(SRetValue.strMessage, m_strMessage);
	return SRetValue;
}
//////////////////////////////////////////////////////////////////////////////
SRETVALUE	CDBLayer::NOII(EXEC SQL BEGIN DECLARE SECTION;
							char cMessageType,
							unsigned int iLocateCode,
							unsigned int TrackingNumber,
							unsigned long long iTimeStamp,
							unsigned long long iPairedShares,
							unsigned long long iImbalanceShares,
							unsigned int iImbalanceDirection,
							char *Stock,
							double dFarPrice,
							double dNearPrice,
							double dRefPrice, 
							char cCrossType,
							char cPriceVariation
							EXEC SQL END DECLARE SECTION;
							)
{

		EXEC SQL INSERT INTO DBA.NOII(
					MessageType,
					LocateCode,
					TrackingNumber,
					TimeStamp_,
					PairedShares,
					ImbalanceShares,
					ImbalanceDirection,
					Stock,
					FarPrice,
					NearPrice,
					RefPrice,
					CrossType,
					PriceVariation
			)
			Values (:cMessageType, :iLocateCode, :TrackingNumber, :iTimeStamp, :iPairedShares, :iImbalanceShares, :iImbalanceDirection, :Stock, :dFarPrice, :dNearPrice, :dRefPrice, :cCrossType, :cPriceVariation);

	SRetValue.SqlCode = m_SqlCode;
	strcpy_s(SRetValue.strMessage, m_strMessage);
	return SRetValue;
}
//////////////////////////////////////////////////////////////////////////////
SRETVALUE	CDBLayer::IPOQuotingPeriodUpdate(EXEC SQL BEGIN DECLARE SECTION;
						char cMessageType,
						unsigned int iLocateCode,
						unsigned int TrackingNumber, 
						unsigned long long iTimeStamp,
						char* Stock,
						unsigned int iIPOQuotationReleaseTime,
						char cIPOQuotationReleaseQualifier,
						double dIPOPrice
						EXEC SQL END DECLARE SECTION;
						)
{

	EXEC SQL INSERT INTO DBA.IPO_QUOTING_PERIOD_UPDATE(
					MessageType,
					LocateCode,
					TrackingNumber,
					TimeStamp_,
					Stock,
					IPOQuotationReleaseTime,
					IPOQuotationReleaseQualifier,
					IPOPrice
			)
			Values (:cMessageType, :iLocateCode, :TrackingNumber, :iTimeStamp, :Stock, :iIPOQuotationReleaseTime, :cIPOQuotationReleaseQualifier, :dIPOPrice);
	
	SRetValue.SqlCode = m_SqlCode;
	strcpy_s(SRetValue.strMessage, m_strMessage);
	return SRetValue;
}
///////////////////////////////////////////////////////////////////////////////////////////////////